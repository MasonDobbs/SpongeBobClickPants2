{"version":3,"sources":["components/Card/Card.js","components/Header/Header.js","components/Footer/Footer.js","components/Loser/Loser.js","components/Win/Win.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","id","onClick","clicked","alt","name","src","image","Header","children","score","highscore","Footer","href","target","Loser","state","lost","reRender","_this","setState","this","src_App_0","Component","Win","win","App","cardsArray","cards","used","unused","indexOf","lostGame","usedCardArray","push","console","log","randomCardArray","Object","toConsumableArray","i","length","j","Math","floor","random","temp","_this2","randomArray","components_Loser_Loser","components_Win_Win","components_Header_Header","map","card","components_Card_Card","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.993bf474.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = props => (\r\n    <div>\r\n        <div className=\"card\" id={props.id} onClick={() => props.clicked(props.id)}>\r\n            <div className=\"img-container\">\r\n                <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = props => (\r\n    <div className=\"header\">\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-8\">\r\n                <div className=\"title\">{props.children}</div>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <div className=\"scores\">\r\n                    Score: {props.score} Highscore: {props.highscore}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n    <div className=\"footer\">\r\n        <div className=\"info\">\r\n            Made By: Mason Dobbs\r\n        </div>\r\n        <a id=\"portfolioLink\" href=\"https://mason-portfolio.herokuapp.com/\" target=\"_blank\">\r\n        Click on me for more apps by Mason\r\n        </a>\r\n    </div>\r\n);\r\n\r\nexport default Footer","import React, { Component } from 'react';\r\nimport './Loser.css'\r\nimport App from '../../App';\r\nclass Loser extends Component {\r\n    state = {\r\n        lost: true\r\n    };\r\n\r\n    reRender = () => {\r\n        this.setState({\r\n            lost: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.lost === false) {\r\n            return <App />\r\n        }\r\n        return (\r\n            <div>\r\n                <h1 className=\"lostGame\">Game Over, get a better memory!</h1>\r\n                <button onClick={this.reRender} className=\"btn\">Play Again</button>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Loser;","import React, { Component } from 'react';\r\nimport './Win.css'\r\nimport App from '../../App';\r\nclass Win extends Component {\r\n    state = {\r\n        win: true\r\n    };\r\n\r\n    reRender = () => {\r\n        this.setState({\r\n            win: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.win === false) {\r\n            return <App />\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"wonGame\">Congratulations, You have a decent memory!</h1>\r\n                    <button onClick={this.reRender} className=\"btn\">Play Again</button>\r\n                </div >\r\n            )\r\n        }\r\n    }\r\n};\r\n\r\nexport default Win;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport cards from './cards.json';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Loser from './components/Loser'\nimport Win from './components/Win';\n\nclass App extends Component {\n\n  state = {\n    cardsArray: cards,\n    score: 0,\n    highscore: 0,\n    lost: false,\n    used: [],\n    unused: [],\n    win: false\n  };\n\n  lostGame() {\n    this.setState({\n      used: [], score: 0, lost: true\n    })\n  }\n\n  clicked = id => {\n    if (this.state.used.indexOf(id) !== -1) {\n      this.lostGame();\n    } else {\n      let usedCardArray = this.state.used;\n      usedCardArray.push(id);\n      this.setState({ used: usedCardArray, score: this.state.score + 1, lost: false })\n      if (this.state.highscore <= this.state.score) {\n        this.setState({ highscore: this.state.score + 1 })\n        console.log(this.state.score);\n        console.log(this.state.highscore);\n      }\n    }\n  }\n\n\n  random() {\n    let randomCardArray = [...cards];\n    for (let i = randomCardArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = randomCardArray[i];\n      randomCardArray[i] = randomCardArray[j];\n      randomCardArray[j] = temp;\n    };\n    return randomCardArray;\n  };\n\n  render() {\n    const randomArray = this.random();\n    if (this.state.lost) {\n      return <Loser />\n    } \n    if (this.state.win) {\n      return <Win />\n    }\n    return (\n      <div className=\"backgroundImg\">\n        <Header score={this.state.score} highscore={this.state.highscore}>SpongeBob ClickPants</Header>\n        <div className=\"row\">\n          {randomArray.map(card => {\n            return (<Card\n              clicked={this.clicked}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />);\n          })}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}